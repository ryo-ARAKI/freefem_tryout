// Definition of boundary
// outer boundary: anticlockwise
// inner boundary: clockwise
border a1(t=6,0){ x=0; y=t; label=1;}
border a2(t=0,12){ x=t; y=0; label=2;}
border a3(t=0,6){ x=12; y=t; label=3;}
border a4(t=12,0){ x=t; y=6; label=4;}
border a5(t=0,-2*pi){ x=2+0.8*cos(t); y=3+0.8*sin(t); label=5;} // cylinder

// triangle-based mesh
int n=1;
mesh Th= buildmesh( a1(30*n)+a2(30*n)+a3(30*n)+a4(30*n)+a5(30*n));

//plot(Th, bb=[[0.0,0.0],[12.0,6.0]]);

// Create FEM space
// P1: calculate on vertexes of triangle
// P2: calculate on vertexes of triangle and middle points of side of triangle
fespace Vh2(Th,P2);
fespace Vh1(Th,P1);

// beta represents "1/Re", beta = 0.007 <--> Re = 140
real beta = 0.007;

real dt = 0.05;
real alpha=1/dt;
int i,niter=10000;

// variables
Vh2 u1,u2;
Vh1 p;
Vh2 v1,v2;
Vh1 q;
Vh2 up1,up2;

// Definition of Navier-Stokes eq. in weak form
problem  NS ([u1,u2,p],[v1,v2,q],solver=Crout,init=i) =
int2d(Th)(
       alpha*( u1*v1 + u2*v2)
      + beta * ( dx(u1)*dx(v1) + dy(u1)*dy(v1) +  dx(u2)*dx(v2) + dy(u2)*dy(v2) )
      + p*q*(0.000001) //全周Dirichletなら必要
      - p*dx(v1)- p*dy(v2)
      - dx(u1)*q- dy(u2)*q
     )
+ int2d(Th) ( -alpha*convect([up1,up2],-dt,up1)*v1 -alpha*convect([up1,up2],-dt,up2)*v2 )
+ on(1,u1=2.0,u2=0) // inlet velocity
+ on(2,4,5,u1=0,u2=0); // Dirichlet b.c.

for (i=0;i<niter;i++)
{
	up1=u1;
	up2=u2;

	NS;
	plot(coef=0.2,[u1,u2],bb=[[0.0,0.0],[12.0,6.0]]);

	//plot(coef=0.2,p,[u1,u2], bb=[[0.0,0.0],[10.0,5.0]]);
 }
